from typing import Any, Concatenate, Iterator, ParamSpec, Protocol, TypeVar

from numpy.typing import NDArray
from typing_extensions import Self

S_co = TypeVar("S_co", covariant=True)
T_co = TypeVar("T_co", bound=Any, covariant=True)
P = ParamSpec("P")

_Idx = None | slice | bool | int

class TensorLike(Protocol[Concatenate[P], T_co]):  # type: ignore[misc]
    def __len__(self) -> int: ...
    def __getitem__(self, __: _Idx | tuple[_Idx, ...]) -> TensorLike[..., T_co]: ...
    def __array__(self) -> NDArray[T_co]: ...
    def __iter__(self) -> Iterator[Self]: ...
    #
    def __mul__(self, __: TensorLike[..., Any] | float) -> TensorLike[..., Any]: ...
    def __rmul__(self, __: TensorLike[..., Any] | float) -> TensorLike[..., Any]: ...
    def __add__(self, __: TensorLike[..., Any] | float) -> TensorLike[..., Any]: ...
    def __radd__(self, __: TensorLike[..., Any] | float) -> TensorLike[..., Any]: ...
    def __sub__(self, __: TensorLike[..., Any] | float) -> TensorLike[..., Any]: ...
    def __truediv__(self, __: TensorLike[..., Any] | float) -> TensorLike[..., float]: ...
    def __rtruediv__(self, __: TensorLike[..., Any] | float) -> TensorLike[..., float]: ...
    def __floordiv__(self, __: TensorLike[..., Any] | float) -> TensorLike[..., int]: ...
    # - properties
    @property
    def T(self) -> Self: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def ndim(self) -> int: ...
    # - methods
    def max(self) -> Self: ...
    def min(self) -> Self: ...
    def mean(self) -> Self: ...
    def std(self) -> Self: ...
    def var(self) -> Self: ...
    def sum(self) -> Self: ...
    def prod(self) -> Self: ...
    def all(self) -> Self: ...
    def any(self) -> Self: ...
    def argmax(self) -> Self: ...
